version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: cctrade-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: binance_trading
      MYSQL_USER: cctrade
      MYSQL_PASSWORD: cctrade123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./deployment/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --default-authentication-plugin=mysql_native_password
    networks:
      - cctrade-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: cctrade-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    command: redis-server --appendonly yes
    networks:
      - cctrade-network

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cctrade-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - GIN_MODE=release
      - APP_ENV=production
      - USE_SQLITE=true
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=cctrade
      - DB_PASSWORD=cctrade123
      - DB_DATABASE=binance_trading
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=SuperSecureJWTKeyForProduction2024!
      - ENCRYPTION_KEY=SuperSecureEncryptionKey32Chars!
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./logs:/app/logs
    networks:
      - cctrade-network

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cctrade-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - cctrade-network

  # Nginx反向代理
  nginx:
    image: nginx:1.25-alpine
    container_name: cctrade-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cctrade-network

volumes:
  mysql_data:
  redis_data:

networks:
  cctrade-network:
    driver: bridge